references pour gestion des signaux : https://indradhanush.github.io/blog/writing-a-unix-shell-part-3/

trop bizarre la len d'un token ne peut pas etre superieure a 4095 sur linux
et on peut pas ecrire plus de 1023 (ou 2047?) chars apres le prompt sur mac
>>!!Gnl recursif limite par la taille de la stack ? -> verifier ulimit -a !!

https://brennan.io/2015/01/16/write-a-shell-in-c/

redirections https://catonmat.net/bash-one-liners-explained-part-three
multiple redirections https://stackoverflow.com/questions/20081653/two-redirection-operators-in-one-command
redirection and pipe explanation https://askubuntu.com/questions/172982/what-is-the-difference-between-redirection-and-pipe/1074550#1074550

signals https://www.youtube.com/watch?v=83M5-NPDeWs

Shell Command Language https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html
man bash https://www.gnu.org/software/bash/manual/html_node/index.html

man bash -> QUOTING
	non-quoted \ : écrit littéralement le caractère qui suit, à l’exception de <newline>
	'' : - écrit littéralement ce qui est entre single quotes
		 - ' ou \' ne peuvent pas apparaitre entre single quotes
	"" : - écrit littéralement sauf pour $, `, \ et ! si history expansion est activé
		 - $ et ` gardent leur special meaning
		 - \ reste un escape char seulement pour $, `, ", \, ou <newline>
		 - * et @ ont un special meaning entre double quotes
	https://stackoverflow.com/questions/25941394/how-does-bash-deal-with-nested-quotes

testeur https://github.com/cacharle/minishell_test.git
https://github.com/lienardale/alientest_minishell.git
basile: https://docs.google.com/spreadsheets/d/1pD3UEKayYV_LiHoYz8N6aOimqS9gxfg3TlZgQ1CFS3A/edit#gid=1627853444
+ tests d'adeline!

header file sections https://www.doc.ic.ac.uk/lab/cplus/cstyle.html#N100D8

refs peerclass mboivin:
https://sgeos.github.io/unix/c/signals/2016/02/24/passing-values-to-c-signal-handlers.html
https://en.wikipedia.org/wiki/Recursive_descent_parser
https://en.wikipedia.org/wiki/Tree_traversal
https://ruslanspivak.com/lsbasi-part1/
http://www.gaudry.be/langages-analyse-syntaxique-ast.html
https://www.aosabook.org/en/bash.html

Flowcharts :
https://www.programiz.com/article/flowchart-programming
Nommer les variables et fonctions :
https://github.com/kettanaito/naming-cheatsheet
Un concept important :
https://fr.wikipedia.org/wiki/Programmation_modulaire
Guide ANSSI programmation en C :
https://www.ssi.gouv.fr/guide/regles-de-programmation-pour-le-developpement-securise-de-logiciels-en-langage-c/
Lire "Introduction" et "Backgrounds" suffit (pour connaître des termes comme : modulaire, monolithe, microservice, etc. Un autre terme à connaître est refactoring) :
https://www.codeproject.com/Articles/1210984/How-to-Organize-Clean-Architecture-to-Modular-Patt
Un livre bien même si c'est du Java :
https://www.goodreads.com/work/quotes/3779106-clean-code-a-handbook-of-agile-software-craftsmanship-robert-c-martin
